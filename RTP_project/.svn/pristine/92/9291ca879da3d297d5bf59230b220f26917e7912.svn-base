//*****************************************************************************
//
// music1.c - Example program for ENCE361 - intro to interrupts.
//          - Also used in preparation for ENCE463 Project #1 2013.
//
//  P.J. Bones	UCECE
//  Last modified:  26.6.2013
//*****************************************************************************

//*****************************************************************************
//
//! Simple interrupt driven program:
//!   samples with ADC0 (Pin 62 on board header)
//!   reference high voltage on PF7 (Pin 29)
//!  Based on 'convertV1.c'
//!
//*****************************************************************************

#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "drivers/rit128x96x4.h"
//#include "stdio.h"
#include "circBuf.h"
//#include "driverlib/timer.h"
#include <stdio.h>
#include "circBuf.h"

//*****************************************************************************
// Constants
//*****************************************************************************
#define PERIOD_CIRBUFF_SIZE 5

#define RTC_RATE_HZ 200000	//Real Time clock tick rate

#define DISPLAY_REFRESH_RATE 5

//*****************************************************************************
// Global variables
//*****************************************************************************
//static circBuf_t g_inBuffer;		// Buffer of size BUF_SIZE integers (sample values)
static volatile unsigned long long g_ulSampCnt;	// Counter for the interrupts
static volatile unsigned long long g_ulRTCTicks; // Ticks since program initialization

// Global circular buffer for storing period times
static circBuf_t g_cBPeriodTimes;

// Global for storing period, used by the pin interupt handler


//*****************************************************************************
// Prototypes
//*****************************************************************************

unsigned long long RTCGet(void);

//*****************************************************************************
//
// The interrupt handler for the for SysTick interrupt.
//
//*****************************************************************************
void
SysTickIntHandler(void)
{
	// Increment real time clock regester
	g_ulRTCTicks++;
}


// Handles the input timing
void
PF5IntHandler(void)
{
	GPIOPinIntClear(GPIO_PORTG_BASE, GPIO_PIN_7);
	static unsigned long long timeLast = 0;
	// Read current time
	unsigned long long time;
	time = RTCGet();
	// Read time since last interrupt trigger into circbuf
	writeCircBuf(&g_cBPeriodTimes, (unsigned short)(time - timeLast));
	// update this thing
	timeLast = time;
	g_ulSampCnt++;
}



//*****************************************************************************
// Initialisation functions clock, ADC, display
//*****************************************************************************
void
initClock (void)
{
  //
  // Set the clock rate. From Section 19.1 in stellaris_peripheral_lib_UG.doc:
  //  "In order to use the ADC, the PLL must be used; the PLL output will be 
  //  used to create the clock required by the ADC." ADC rate = 8 MHz / 10.
  SysCtlClockSet(SYSCTL_SYSDIV_10 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |
                   SYSCTL_XTAL_8MHZ);
  //
  // Set up the period for the SysTick timer.  The SysTick timer period is
  // set as a function of the system clock.
  SysTickPeriodSet(SysCtlClockGet() / RTC_RATE_HZ);

  //
  // Reset real time clock
  g_ulRTCTicks = 0;
  //
  // Register the interrupt handler
  SysTickIntRegister(SysTickIntHandler);
  //
  // Enable interrupt and device
  SysTickIntEnable();
  SysTickEnable();
}


/*
void
initPin (void)
{	
    //
    // Enable and configure the port and pins used for output with 8 mA
    SysCtlPeripheralEnable (SYSCTL_PERIPH_GPIOF); 
    GPIOPinTypeGPIOOutput (GPIO_PORTG_BASE, GPIO_PIN_7);
    GPIOPadConfigSet(GPIO_PORTG_BASE, GPIO_PIN_7, GPIO_STRENGTH_8MA,
                     GPIO_PIN_TYPE_STD);
    //
    // Set pin high
    GPIOPinWrite (GPIO_PORTG_BASE, GPIO_PIN_7, GPIO_PIN_7);
}*/

void
initPinInput (void)
{
	//Enable GPIO module for select button, i.e., this is on Port-G
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);

	// **********************************************************
	// We can set pin PG4 as an input
	GPIODirModeSet(GPIO_PORTG_BASE, GPIO_PIN_7, GPIO_DIR_MODE_IN);

	// Now, we need to configure the amount of current allowable through
	// this port pin
	GPIOPadConfigSet(GPIO_PORTG_BASE, GPIO_PIN_7, GPIO_STRENGTH_2MA,
					 GPIO_PIN_TYPE_STD_WPU);
	//GPIOPinTypeGPIOInput (GPIO_PORTG_BASE, GPIO_PIN_2);

	GPIOPortIntRegister(GPIO_PORTG_BASE, PF5IntHandler);

	//GPIOIntTypeSet(GPIO_PORTG_BASE, GPIO_PIN_7, GPIO_LOW_LEVEL);
	GPIOIntTypeSet(GPIO_PORTG_BASE, GPIO_PIN_7, GPIO_RISING_EDGE);

	GPIOPinIntEnable(GPIO_PORTG_BASE, GPIO_PIN_7);
}

// my temporary sprintf function.
// Only use one '%' to indicate placement of a unsigned short.
void myprintf(char strBuf[30], char string[30], unsigned short num)
{
	int i = 0;
	for (i = 0; i < 30; i++)
	{
		strBuf[i] = string[i];

		// insert character
		if (string[i] == '%')
		{
			strBuf[i] = num + 48;
		}
	}
}


//*****************************************************************************
//
// Returns mS since program initialisation
//
//*****************************************************************************
unsigned long long RTCGet(void)
{
	IntMasterDisable();
	unsigned long ticks = g_ulRTCTicks;
	IntMasterEnable();
	return ticks;
}

//*****************************************************************************
//
// Display running time
//
//*****************************************************************************
void
displayClock (void)
{
	char string[100];
	sprintf(string, "time (S): %u", RTCGet() / RTC_RATE_HZ);
    RIT128x96x4StringDraw(string, 5, 5, 15);
}

//*****************************************************************************
//
// Display # of pin triggered interrupts
//
//*****************************************************************************
void
displaySMPLS(void)
{
	/*
	char string[100];
	IntMasterDisable();
	sprintf(string, "Periods Timed: %u", g_ulSampCnt);
	IntMasterEnable();
    RIT128x96x4StringDraw(string, 5, 25, 15);
    */
}

//*****************************************************************************
//
// Display measured period
//
//*****************************************************************************

void
displayPeriod (unsigned short period)
{
	char string[100];
	sprintf(string, "F (Hz): %.1f", (float)RTC_RATE_HZ/(float)period);
    RIT128x96x4StringDraw(string, 5, 25, 15);
	sprintf(string, "T (uS): %8u", period*(1000000/RTC_RATE_HZ));
    RIT128x96x4StringDraw(string, 5, 45, 15);
}


//*****************************************************************************
//
// clear display
//
//*****************************************************************************
void
displayClear(void)
{
	RIT128x96x4Clear();
}


int
main(void)
{
	IntMasterDisable();

	//unsigned int i;
	//unsigned short pinValue;
	//unsigned long ticks;

	unsigned long time;

	unsigned short period;
	unsigned long periods[PERIOD_CIRBUFF_SIZE] = {0};
	unsigned long periodSum;

	// Initialise global ringbuffer
	initCircBuf(&g_cBPeriodTimes, PERIOD_CIRBUFF_SIZE);
	//circBuf_t circbuffDEBUG = g_cBPeriodTimes; //Pointer to ringbuffer for debug



	
	initClock ();
	initPinInput ();

	// intialise the OLED display
    RIT128x96x4Init(1000000);

    //
    // Enable interrupts to the processor.
    IntMasterEnable();



	while (1)
	{
		time = RTCGet();
		if (time % (RTC_RATE_HZ / DISPLAY_REFRESH_RATE) == 0)
		{
			//Average ring buffer elements
			GPIOPinIntDisable(GPIO_PORTG_BASE, GPIO_PIN_7);
			periodSum = 0;
			unsigned short i;
			for(i = 0; i < PERIOD_CIRBUFF_SIZE; i++)
			{
				periods[i] = readCircBuf(&g_cBPeriodTimes);
				periodSum += periods[i];
			}
			GPIOPinIntEnable(GPIO_PORTG_BASE, GPIO_PIN_7);
			period = periodSum / PERIOD_CIRBUFF_SIZE;

			//displayClear();
			displayClock();
			displaySMPLS();
			displayPeriod(period);
		}

	}
}
