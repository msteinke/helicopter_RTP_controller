// *******************************************************
//
// mbutton.c
//
// Support for buttons
//  Stellaris LM3S1968 EVK
//
// *******************************************************

#include "button.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "inc/hw_memmap.h"

/* Initialise a GPIO pin for use as a button. Module supports button debouncing
 * \param *button a button type
 * \param ulPort GPIO port that the button is located on.
 * \param ucPin  GPIO pin that the button uses on the GPIO port.
 */
void buttonInit(button_t *button, unsigned long ulPort, unsigned char ucPin)
{
    //
    // Enable and configure the port and pins used for output with 8 mA
    if (ulPort == GPIO_PORTE_BASE)
    {
		SysCtlPeripheralEnable (SYSCTL_PERIPH_GPIOE);
    }
    else if (ulPort == GPIO_PORTF_BASE)
    {
    	SysCtlPeripheralEnable (SYSCTL_PERIPH_GPIOF);
    }
    else if (ulPort == GPIO_PORTG_BASE)
    {
    	SysCtlPeripheralEnable (SYSCTL_PERIPH_GPIOG);
    }
    else if (ulPort == GPIO_PORTH_BASE)
    {
    	SysCtlPeripheralEnable (SYSCTL_PERIPH_GPIOH);
    }

    // Initialize button pins
    GPIOPinTypeGPIOInput (ulPort,  ucPins );

    // Enable internal pullups on button pins
    GPIOPadConfigSet(ulPort,  ucPins, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD_WPU);

	button->ucPin = ucPin;
	button->ulPort = ulPort;
	button->ucState = 0;
	button->ucPinState = 0;
	button->ucSamePinStateCount = 0;
}


/* Takes the pre-read port value, as its likely multiple buttons will be updated
 * at the same time. This way the port value is read once in the calling function
  and passed to any subsequent calls
 */
void buttonUpdate(button_t *button, long portRead)
//void buttonInit(button_t *button, unsigned long ulPort, unsigned char ucPin)
{
	// State unchanged increment counter
	if(button->ucPinState == portRead & button->ucPin)
	{
		button->ucSamePinStateCount++;
	}
	// State changed, Reset counter and change state variable
	else
	{
		button->ucSamePinStateCount = 0;
	}
	if (button->ucSamePinStateCount >= SWITCHOVER_THRESHOLD)
	{
		if (button->ucState == UP && button->ucPinState == 0)
		{
			button->ucState = PUSHED;
		}
		if (button->ucState != UP && button->ucPinState == 1)
		{
			button->ucState = UP;
		}
	}
}

unsigned char buttonIsPushed(button_t *button)
{
	if (button->ucState == PUSHED)
	{
		button->ucState = DOWN;
		return 1;
	}
	else
		return 0;
}

unsigned char buttonIsDown(button_t *button)
{
	return button->ucState != UP;
}


