// *******************************************************
//
// vbutton.c
//
// Support for buttons
//  Stellaris LM3S1968 EVK
//
// *******************************************************

#include "vbutton.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
//#include "driverlib/systick.h"

#ifdef REAL_BUTTONS_
	// Bit fields used to select which buttons are initialised in the
	//  button set.  Designed to be ORed in argument to initButSet().
	#define PORT_BASE_B				GPIO_PORTG_BASE
	#define SYSCTL_PERIPH_GPIO_B	SYSCTL_PERIPH_GPIOG
	#define INT_GPIO_B 				47 // GPIO Port G
/*
	#define UP_B 			0x08 // GPIO pin 3
	#define DOWN_B 			0x10 // GPIO pin 4
	#define LEFT_B 			0x20 // GPIO pin 5
	#define RIGHT_B 		0x40 // GPIO pin 6
	#define SELECT_B 		0x80 // GPIO pin 7
*/
	#define UP_B 			GPIO_PIN_3 // GPIO pin 3
	#define DOWN_B 			GPIO_PIN_4 // GPIO pin 4
	#define LEFT_B 			GPIO_PIN_5 // GPIO pin 5
	#define RIGHT_B 		GPIO_PIN_6 // GPIO pin 6
	#define SELECT_B 		GPIO_PIN_7 // GPIO pin 7

#elif defined VIRTUAL_BUTTONS_
	// Bit fields used to select which buttons are initialised in the
	//  button set.  Designed to be ORed in argument to initButSet().
	#define PORT_BASE_B				GPIO_PORTB_BASE
	#define SYSCTL_PERIPH_GPIO_B	SYSCTL_PERIPH_GPIOB
	#define INT_GPIO_B 				17 // GPIO Port B

	//#define RESET_B 		0x02 // GPIO pin 1
	#define LEFT_B 			0x04 // GPIO pin 2
	#define RIGHT_B			0x08 // GPIO pin 3
	#define SELECT_B		0x10 // GPIO pin 4
	#define UP_B			0x20 // GPIO pin 5
	#define DOWN_B			0x40 // GPIO pin 6
#else
	#error "Virtual or real buttons have not been defined. Check mbutton.h for VIRTUAL_BUTTONS_or REAL_BUTTONS_"
#endif



//
// a list of button types, one for each button on port G
static button_t buttonPointer[7];


// *******************************************************
// Interrupt handler for the port. This monitors GPIO pins
// and modifies the button_t type.
void buttonISR(void)
{
	//


	button_t* button;

	// Read the pin's digital state
	//long rawPinData = GPIOPinRead(button->ulPort, button->ucPin);
	//long rawPinData = GPIOPinRead(PORT_BASE_B,
	//		UP_B | DOWN_B | LEFT_B | RIGHT_B | SELECT_B);

	long rawPinData =  GPIOPinIntStatus(PORT_BASE_B,
			UP_B | DOWN_B | LEFT_B | RIGHT_B | SELECT_B);

	//long rawPinData =  GPIOPinIntStatus(PORT_BASE_B, 1);

	//transfer the current pin read to a more meaningful variable
	long pin = 0;// = 1 << (buttonPin + 3);

	//int pinState;

	long currentPin;  // loop through all the pins
	for (currentPin = UP; currentPin <= SELECT; currentPin++)
	{
		button = &buttonPointer[currentPin];

		switch(currentPin)
		{
		    case UP:
		        pin = UP_B;
		        break;
		    case DOWN:
		    	pin = DOWN_B;
		    	break;
		    case LEFT:
		    	pin = LEFT_B;
		    	break;
		    case RIGHT:
		    	pin = RIGHT_B;
		    	break;
		    case SELECT:
		    	pin = SELECT_B;
		    	break;
		    default:
		    	pin = 0;
		    	break;
		}

		// Don't do anything until pushed button has
		// been serviced by checkBut().
		if ((button->iState == BUT_PUSHED) || (button->iState == BUT_INACTIVE))
		{
			// Do nothing
		}
			// check for a button press.
		else if (rawPinData & pin)
		{
			button->iState = BUT_PUSHED;
		}
	}

	GPIOPinIntClear(PORT_BASE_B, LEFT_B | RIGHT_B | SELECT_B | UP_B | DOWN_B);
}

// *******************************************************
// mButtonInit: Sets up a button.
//void ButtonInit (unsigned char buttonPin)
void ButtonInit (void)
{

	unsigned char ucPin = UP_B | DOWN_B | LEFT_B | RIGHT_B | SELECT_B;

	short i = 0;
	for (i = UP; i <= SELECT; i++)
	{
		button_t* button = &buttonPointer[i];
	    // Set the button_t values
	    button->iState = BUT_OUT; // enable button
	    //button->uiCntIn = 0;
	    //button->uiCntOut = 0;
	    button->ucPin = i;
	}

	//Enable GPIO module for decoder
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIO_B);

	// setup  input pins
	GPIODirModeSet(PORT_BASE_B, ucPin, GPIO_DIR_MODE_IN);

	// disable internal pullups on decoder pins
	//GPIOPadConfigSet(PORT_BASE_B, ucPin,
	//		GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);


	GPIOPinTypeGPIOInput(PORT_BASE_B, ucPin);

	// want this if you're using the real buttons
	GPIOPadConfigSet(PORT_BASE_B, ucPin,
			GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

	//GPIOIntTypeSet(PORT_BASE_B, ucPin, GPIO_RISING_EDGE);
	//GPIOIntTypeSet(GPIO_PORTG_BASE, PIN_2, GPIO_BOTH_EDGES);
	GPIOIntTypeSet(PORT_BASE_B, ucPin , GPIO_FALLING_EDGE);
	//GPIOIntTypeSet(GPIO_PORTF_BASE, PIN_1 | PIN_2 , GPIO_BOTH_EDGES);

	GPIOPortIntRegister(PORT_BASE_B, buttonISR);

	//IntPrioritySet( INT_GPIO_B , 0);

	GPIOPinIntEnable(PORT_BASE_B, ucPin);
	//GPIOPinIntEnable(GPIO_PORTF_BASE, PIN_2);


}




// *******************************************************
// mButtonUpdate: This goes into systickinthandler and polls
// each button to determine if was a button push.
//void mButtonUpdate (void)
//{
//
//}


// *******************************************************
// checkBut: Checks the specified individual button and returns true
//  (1) if the button is active and has state BUT_PUSHED (newly pushed)
//  and modifies state to BUT_IN. Returns false (0) otherwise.
unsigned char ButtonCheck (unsigned char button)
{
	//
	if (buttonPointer[button].iState == BUT_PUSHED)
	{
		buttonPointer[button].iState = BUT_OUT; // modify state In or OUT??
		return true;
	}
	else
	{
		return false;
	}

}

// *******************************************************
// enableBut: Alters the state of the specified button to BUT_OUT,
//  if it was previously BUT_INACTIVE, otherwise makes no change.
void ButtonEnable (unsigned char button)
{
	//
	if (buttonPointer[button].iState == BUT_INACTIVE)
	{
		buttonPointer[button].iState = BUT_OUT;
	}
}

// *******************************************************
// disableBut: Alters the state of the specified button to
//  BUT_INACTIVE.
void ButtonDisable (unsigned char button)
{
	buttonPointer[button].iState = BUT_INACTIVE;
}



